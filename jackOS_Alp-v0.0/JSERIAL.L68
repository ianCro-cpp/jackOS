00008000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 4/26/2023 2:20:54 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  *   JSERIAL.X68 - INPUT/OUTPUT UTILITY ROUTINES
00000000                             3  * Keep in mind both input and output bytes will load into the D0
00000000                             4  *-----------------------------------------------------------
00000000                             5  * DUART Offsets
00000000                             6  *   Channel A
00000000  =00000001                  7  MR1A    EQU      $01    ;Mode Register A (Read and Write Mode)
00000000  =00000001                  8  MR2A    EQU      $01    ;Mode Register A (Read and Write Mode)
00000000  =00000003                  9  SRA     EQU      $03    ;Status Register A (Read Mode)
00000000  =00000003                 10  CSRA    EQU      $03    ;Clock Select Register A (Write Mode)
00000000  =00000005                 11  CRA     EQU      $05    ;Command Register A (Write Mode)
00000000  =00000007                 12  HRA     EQU      $07    ;Holding Register A (Tx and Rx)
00000000                            13  *   Channel B
00000000  =00000011                 14  MR1B    EQU      $11    ;Mode Register B (Read and Write Mode)
00000000  =00000011                 15  MR2B    EQU      $11    ;Mode Register B (Read and Write Mode)
00000000  =00000013                 16  SRB     EQU      $13    ;Status Register B (Read Mode)
00000000  =00000013                 17  CSRB    EQU      $13    ;Clock Select Register B (Write Mode)
00000000  =00000015                 18  CRB     EQU      $15    ;Command Register B (Write Mode)
00000000  =00000017                 19  HRB     EQU      $17    ;Holding Register B (Tx and Rx)
00000000                            20  *   General DUART Control
00000000  =00000009                 21  ACR     EQU     $09     ;Auxilary Control Register
00000000  =0000000D                 22  CTU     EQU     $0D     ;Counter/Timer Upper Byte Register 
00000000  =0000000F                 23  CTL     EQU     $0F     ;Counter/Timer Lower Byte Register
00000000                            24  * DUART Command Register Values
00000000  =00000001                 25  RxEn    EQU     $01     ;Enable Rx
00000000  =00000002                 26  RxDs    EQU     $02     ;Disable Rx
00000000  =00000004                 27  TxEn    EQU     $04     ;Enable Tx
00000000  =00000008                 28  TxDs    EQU     $08     ;Disable Tx
00000000  =00000010                 29  MRRst   EQU     $10     /Reset MRA/MRB Pointer
00000000  =00000020                 30  RxRst   EQU     $20     ;Reset Rx
00000000  =00000030                 31  TxRst   EQU     $30     ;Reset Tx
00000000  =00000000                 32  Rx_Rdy  EQU     $00     ;Check SRA/SRB output bit for RXRDY
00000000  =00000002                 33  Tx_Rdy  EQU     $02     ;Check SRA/SRB output bit for TXRDY
00000000                            34  
00000000  =00100000                 35  DATA        EQU     $100000 ;Uses the RAM start
00000000  =000000CC                 36  BAUD_RATE   EQU     $CC    ;Baud Rate = 19.2K Baud = 2400 bytes/second
00000000                            37  REG_F       DS.W    37     ;frame for D0-D7, A0-A6, USP, SSP, SR, PC
0000004A                            38  
0000004A                            39  *---------------------------
0000004A                            40  *     DUART INITIALIZATION
0000004A                            41  *---------------------------
Line 42 ERROR: Undefined symbol
0000004A  41F9 004DBD16             42  INIT_DUART:  LEA     DUART,A0    ;point the A0 to the base DUART address
00000050                            43  
00000050                            44  ;First, reset both channels A and B during a software reset
00000050                            45      ;Channel A
00000050  117C 0030 0005            46              MOVE.B  #$30,CRA(A0)    ;reset the TxA
00000056  117C 0020 0005            47              MOVE.B  #$20,CRA(A0)    ;reset the RxA
0000005C  117C 0010 0005            48              MOVE.B  #$10,CRA(A0)    ;reset the MRA pointer
00000062                            49      ;Channel B
00000062                            50              ;MOVE.B  #$30,CRB(A0)    
00000062                            51              ;MOVE.B  #$20,CRB(A0)
00000062                            52              ;MOVE.B  #$10,CRB(A0)
00000062                            53  ;Then, intiialize both channels
00000062                            54      ;Channel A
00000062  117C 0080 0009            55              MOVE.B  #$80,ACR(A0)    ;selects the baud rate set 2
00000068  117C 00CC 0003            56              MOVE.B  #BAUD_RATE,CSRA(A0) ;sets to 19.2k baud for Tx/Rx
0000006E  117C 0013 0001            57              MOVE.B  #$13,MR1A(A0)   ;8bits, no parity, 1 stop bit
00000074                            58      ;Channel B
00000074                            59              ;MOVE.B  #BAUD_RATE,CSRB(A0)
00000074                            60              ;MOVE.B  #$13,MR1B(A0)
00000074                            61              
00000074  117C 0007 0001            62              MOVE.B  #$07,MR2A(A0) ;auto Echo with Stop Bit Length of 1
0000007A                            63              ;MOVE.B  #$47,MR2B(A0)
0000007A                            64              
0000007A  117C 0005 0005            65              MOVE.B  #$05,CRA(A0) ;sets both Tx and Rx ready
00000080                            66              ;MOVE.B  #$05,CRB(A0)
00000080  4E75                      67              RTS
00000082                            68              
00000082  2F00                      69  CLEAR:      MOVE.L  D0, -(SP)
Line 70 ERROR: Undefined symbol
00000084  103C 0016                 70              MOVE.B  #NEWPAGE, D0
00000088  6100 0076                 71              BSR PUTCHAR
0000008C  201F                      72              MOVE.L  (SP)+, D0
0000008E  4E75                      73              RTS
00000090                            74              
00000090  2F00                      75  OUTSPACE:   MOVE.L  D0, -(SP)
Line 76 ERROR: Undefined symbol
00000092  103C 0016                 76              MOVE.B  #SPACE, D0
00000096  6100 0068                 77              BSR PUTCHAR
0000009A  201F                      78              MOVE.L  (SP)+, D0
0000009C  4E75                      79              RTS
0000009E                            80              
0000009E  2F00                      81  OUTNL:      MOVE.L  D0, -(SP)
Line 82 ERROR: Undefined symbol
000000A0  103C 0016                 82              MOVE.B  #CR, D0
000000A4  6100 005A                 83              BSR PUTCHAR
Line 84 ERROR: Undefined symbol
000000A8  103C 0016                 84              MOVE.B  #LF, D0
000000AC  6100 0052                 85              BSR PUTCHAR
000000B0  201F                      86              MOVE.L  (SP)+, D0
000000B2  4E75                      87              RTS  
000000B4                            88              
000000B4  4280                      89  CLEAR_ALL:  CLR.L   D0
000000B6  4281                      90              CLR.L   D1
000000B8  4282                      91              CLR.L   D2
000000BA  4283                      92              CLR.L   D3
000000BC  4284                      93              CLR.L   D4
000000BE  4285                      94              CLR.L   D5
000000C0  4286                      95              CLR.L   D6
000000C2  4287                      96              CLR.L   D7
000000C4  2040                      97              MOVE.L  D0,A0
000000C6  2240                      98              MOVE.L  D0,A1
000000C8  2440                      99              MOVE.L  D0,A2
000000CA  2640                     100              MOVE.L  D0,A3
000000CC  2840                     101              MOVE.L  D0,A4
000000CE  2A40                     102              MOVE.L  D0,A5
000000D0  2C40                     103              MOVE.L  D0,A6
000000D2  48E7 FFFF                104              MOVEM.L A0-A7/D0-D7, -(SP)
000000D6  3C3C 000E                105              MOVE.W  #14,D6
000000DA  41F9 00100000            106              LEA     DATA+REG_F, A0
000000E0  20DF                     107  .loop       MOVE.L  (SP)+, (A0)+
000000E2  51CE FFFC                108              DBRA    D6,.loop
000000E6  4E6A                     109              MOVE.L  USP, A2
000000E8  20CA                     110              MOVE.L  A2, (A0)+
000000EA  201F                     111              MOVE.L  (SP)+, D0
000000EC  0480 0000000A            112              SUB.L   #10, D0
000000F2  20C0                     113              MOVE.L  D0, (A0)+
000000F4  30FC 2000                114              MOVE.W  #$2000, (A0)+
000000F8  20FC 00101000            115              MOVE.L  #$101000, (A0)+
000000FE  4E75                     116              RTS
00000100                           117  
00000100                           118  *--------------------------------
00000100                           119  *     GENERAL UTILITY SUBROUTINES
00000100                           120  *--------------------------------
00000100  2F01                     121  PUTCHAR:    MOVE.L      D1,-(SP)
00000102  2F00                     122              MOVE.L      D0,-(SP)
00000104  1200                     123              MOVE.B      D0,D1
00000106                 TRUE      124              IFNE SIM
00000106  303C 0006                125              MOVE    #06,D0
0000010A  4E4F                     126              TRAP    #15
0000010C  6000 0014                127              BRA     .EXIT
00000110                           128              ENDC
Line 129 ERROR: Undefined symbol
00000110  41F9 004DBD16            129              LEA     DUART,A0
00000116  0828 0002 0003           130  .WAITA      BTST    #Tx_Rdy, SRA(A0)
0000011C  67F8                     131              BEQ     .WAITA     
0000011E                           132  ;.WAITB      BTST    #Tx_Rdy, SRB(A0)
0000011E                           133  ;            BEQ     .WAITA
0000011E                           134  ;.MOVEB      MOVE.B  D1,HRB(A0)
0000011E                           135  ;            JSR     .EXIT
0000011E  1141 0007                136  .MOVEA      MOVE.B  D1,HRA(A0)
00000122  201F                     137  .EXIT       MOVE.L  (SP)+,D0
00000124  221F                     138              MOVE.L  (SP)+,D1
00000126  4E75                     139              RTS
00000128                           140              
00000128                           141  GETCHAR:
00000128  2F01                     142      MOVE.L      D1,-(SP)
0000012A  1200                     143      MOVE.B      D0,D1
0000012C                 TRUE      144      IFNE SIM
0000012C  103C 0005                145      MOVE.B      #5,D0
00000130  4E4F                     146      TRAP        #15
00000132  6000 000E                147      BRA         .EXIT
00000136                           148      ENDC
00000136  0828 0000 0003           149  .WAITA    BTST        #Rx_Rdy,SRA(A0)
0000013C  67F8                     150            BEQ         .WAITA
0000013E                           151  ;.WAITB    BTST        #Rx_Rdy,SRB(A0)
0000013E                           152  ;          BEQ         .WAITA
0000013E                           153  ;.GRABB    MOVE.B      HRB(A0),D1
0000013E                           154  ;          JSR         .EXIT
0000013E  1228 0007                155  .GRABA    MOVE.B      HRA(A0),D1
00000142  1001                     156  .EXIT     MOVE.B      D1,D0
00000144  221F                     157            MOVE.L      (SP)+,D1
00000146  4E75                     158            RTS
00000148                           159  
00000148                           160  * PUTSTR: print string in memory. string terminated by $04 (ASCII End of Transmission)
00000148                           161  * arguments: address of first character in D0
00000148                           162  * return: no values
00000148  2F00                     163  PUTSTR:     MOVE.L D0,-(SP) ; SAVE ON STACK. string pointer (argument)
0000014A  2F01                     164              MOVE.L D1, -(SP) ; SAVE ON STACK. temp string pointer
0000014C                           165              
0000014C                           166              ;MOVE.L A1, D0 ; move address of the string to d0
0000014C                           167              ;MOVE.L D0, D1 ; move pointer to d1 (since d0 needed to call PUTCHAR)
0000014C  0240 0000                168              ANDI    #$00000000, D0
00000150                           169              
00000150  1019                     170  .1CHAR      MOVE.B (A1)+, D0 ; load character from string to d0
00000152  0C40 0004                171              CMPI #$04, D0 ; char is $00?
00000156  6700 0006                172              BEQ .PSTREXIT ; if yes, we're done
0000015A  61A4                     173              BSR PUTCHAR ; print the character
0000015C                           174              ;ADDI #$1, D1 ; move up pointer by 1
0000015C  60F2                     175              BRA .1CHAR ; and repeat print
0000015E                           176              
0000015E  221F                     177  .PSTREXIT   MOVE.L (SP)+, D1 ; RESTORE FROM STACK. temp string pointer
00000160  201F                     178              MOVE.L (SP)+, D0 ; RESTORE FROM STACK. string pointer (argument)
00000162  4E75                     179              RTS
00000164                           180  
00000164                           181      
00000164                           182  *---------------------------
00000164                           183  *     OUTPUT SUBROUTINES
00000164                           184  *
00000164                           185  *     OUT1X = PRINT ONE HEXADECIMAL CHARACTER
00000164                           186  *     OUT2X = PRINT TWO HEXADECIMAL CHARACTER
00000164                           187  *     OUT4X = PRINT FOUR HEXADECIMAL CHARACTER
00000164                           188  *     OUT8X = PRINT EIGHT HEXADECIMAL CHARACTER
00000164                           189  *---------------------------
00000164  1F00                     190  OUT1X:  MOVE.B  D0,-(SP)    ;
00000166  C03C 000F                191          AND.B   #$0F,D0     ;
0000016A  0600 0030                192          ADD.B   #$30,D0
0000016E  B03C 0039                193          CMP.B   #$39,D0
00000172  6302                     194          BLS.S   OUT1X1
00000174  5E00                     195          ADD.B   #$07,D0
00000176                           196          
00000176  6188                     197  OUT1X1: BSR     PUTCHAR
00000178  101F                     198          MOVE.B  (SP)+,D0
0000017A  4E75                     199          RTS
0000017C                           200          
0000017C  E818                     201  OUT2X:  ROR.B   #4,D0
0000017E  61E4                     202          BSR     OUT1X
00000180  E918                     203          ROL.B   #4,D0
00000182  60E0                     204          BRA     OUT1X
00000184                           205          
00000184  E058                     206  OUT4X:   ROR.W   #8,D0
00000186  61F4                     207          BSR     OUT2X
00000188  E158                     208          ROL.W   #8,D0
0000018A  60F0                     209          BRA     OUT2X
0000018C                           210          
0000018C  4840                     211  OUT8X:   SWAP    D0
0000018E  61F4                     212          BSR     OUT4X
00000190  4840                     213          SWAP    D0
00000192  60F0                     214          BRA     OUT4X
00000194                           215   
00000194                           216  *---------------------------
00000194                           217  *     INPUT SUBROUTINES
00000194                           218  *
00000194                           219  *   HEX = GET ONE HEX CHARACTER INTO D0
00000194                           220  *   BYTE = GET TWO HEX CHARACTERS INTO D0
00000194                           221  *   WORD = GET FOUR WORD HEX CHARACTERS INTO D0
00000194                           222  *   LONGWD = GET A LONGWORD FROM THE LINE BUFFER INTO D0
00000194                           223  *   Keep in mind Bit 0 of D7 is set to indicate a hexadecimal input error
00000194                           224  *---------------------------
00000194  6192                     225  HEX:    BSR     GETCHAR
00000196  0400 0030                226          SUB.B   #$30,D0
0000019A  6B0E                     227          BMI.S   .NOT_HEX
0000019C  B03C 0009                228          CMP.B   #$09,D0
000001A0  6F0C                     229          BLE.S   .HEX_OK
000001A2  5F00                     230          SUB.B   #$07,D0
000001A4  B03C 000F                231          CMP.B   #$0F,D0
000001A8  6F04                     232          BLE.S   .HEX_OK
000001AA                           233          
000001AA  8E3C 0001                234  .NOT_HEX OR.B    #1,D7
000001AE                           235  
000001AE  6100 FF50                236  .HEX_OK BSR PUTCHAR 
000001B2  4E75                     237          RTS
000001B4                           238  
000001B4  2F01                     239  BYTE:   MOVE.L  D1,-(SP)
000001B6  61DC                     240          BSR     HEX
000001B8  E900                     241          ASL.B   #4,D0
000001BA  1200                     242          MOVE.B  D0,D1
000001BC  61D6                     243          BSR     HEX
000001BE  D001                     244          ADD.B   D1,D0
000001C0  221F                     245          MOVE.L  (SP)+,D1
000001C2  4E75                     246          RTS
000001C4                           247  
000001C4  61EE                     248  WORD:    BSR     BYTE
000001C6  E140                     249          ASL.W   #8,D0
000001C8  60EA                     250          BRA     BYTE
000001CA                           251          
000001CA  61F8                     252  LONGWD:  BSR     WORD
000001CC  4840                     253          SWAP    D0
000001CE  60F4                     254          BRA     WORD
Line 255 WARNING: END directive missing, starting address not set

6 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACR                 9
BAUD_RATE           CC
BYTE                1B4
CLEAR               82
CLEAR_ALL           B4
CLEAR_ALL:LOOP      E0
CRA                 5
CRB                 15
CSRA                3
CSRB                13
CTL                 F
CTU                 D
DATA                100000
GETCHAR             128
GETCHAR:EXIT        142
GETCHAR:GRABA       13E
GETCHAR:WAITA       136
HEX                 194
HEX:HEX_OK          1AE
HEX:NOT_HEX         1AA
HRA                 7
HRB                 17
INIT_DUART          4A
LONGWD              1CA
MR1A                1
MR1B                11
MR2A                1
MR2B                11
MRRST               10
OUT1X               164
OUT1X1              176
OUT2X               17C
OUT4X               184
OUT8X               18C
OUTNL               9E
OUTSPACE            90
PUTCHAR             100
PUTCHAR:EXIT        122
PUTCHAR:MOVEA       11E
PUTCHAR:WAITA       116
PUTSTR              148
PUTSTR:1CHAR        150
PUTSTR:PSTREXIT     15E
REG_F               0
RXDS                2
RXEN                1
RXRST               20
RX_RDY              0
SRA                 3
SRB                 13
TXDS                8
TXEN                4
TXRST               30
TX_RDY              2
WORD                1C4
